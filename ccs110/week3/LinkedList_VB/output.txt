Testing the Link-Based List:
isEmpty: returns 1; should be 1 (true)
Inserted one at position 1
Inserted two at position 2
Inserted three at position 3
Inserted four at position 4
Inserted five at position 5
Inserted six at position 6
The list contains 
one two three four five six 

isEmpty: returns 0; should be 0 (false)
getLength returns : 6; should be 6
The entry at position 4 is four; should be four
After replacing the entry at position 3 with XXX: Before reversing the list:
The list contains 
one two XXX four five six 

After reversing the list:
The list contains 
six five four XXX two one 

Finally, lets first undo the reverse and then check our pointers: 
Node: one Address: 0x600003b7c030 |  Prev: 0x0 Next: 0x600003b7c060
Node: two Address: 0x600003b7c060 |  Prev: 0x600003b7c030 Next: 0x600003b7c090
Node: XXX Address: 0x600003b7c090 |  Prev: 0x600003b7c060 Next: 0x600003b7c0c0
Node: four Address: 0x600003b7c0c0 |  Prev: 0x600003b7c090 Next: 0x600003b7c0f0
Node: five Address: 0x600003b7c0f0 |  Prev: 0x600003b7c0c0 Next: 0x600003b7c120
Node: six Address: 0x600003b7c120 |  Prev: 0x600003b7c0f0 Next: 0x0
